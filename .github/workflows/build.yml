name: Build Desktop App with Briefcase

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:

  build:
    strategy:
      matrix:
        platform:
          - { os: ubuntu-latest, briefcase-platform: linux }
          - { os: windows-latest, briefcase-platform: windows }
          - { os: macos-latest, briefcase-platform: macOS }
        python-version: ['3.11']

    runs-on: ${{ matrix.platform.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Linux)
      if: matrix.platform.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          python3-pyqt5 \
          python3-pyqt5.qtwebengine \
          python3-pyqt5.qtwebchannel \
          libqt5webkit5-dev \
          qttools5-dev-tools

    - name: Install Briefcase
      run: |
        python -m pip install --upgrade pip
        pip install briefcase

    - name: Create Briefcase app
      run: python -m briefcase create ${{ matrix.platform.briefcase-platform }}

    - name: Build Briefcase app
      run: python -m briefcase build ${{ matrix.platform.briefcase-platform }}

    - name: Package Briefcase app
      run: python -m briefcase package ${{ matrix.platform.briefcase-platform }} --adhoc-sign

    - name: Find and rename packages (Windows)
      if: matrix.platform.os == 'windows-latest'
      shell: powershell
      run: |
        $msiFile = Get-ChildItem -Path "dist" -Filter "*.msi" | Select-Object -First 1
        if ($msiFile) {
          $newName = "Flask-PyWebView-App-Windows.msi"
          Rename-Item -Path $msiFile.FullName -NewName $newName
          Write-Output "Renamed to: $newName"
        }

    - name: Find and rename packages (macOS)
      if: matrix.platform.os == 'macos-latest'
      run: |
        if [ -f dist/*.dmg ]; then
          mv dist/*.dmg dist/Flask-PyWebView-App-macOS.dmg
          echo "Renamed to: Flask-PyWebView-App-macOS.dmg"
        fi

    - name: Find and rename packages (Linux)
      if: matrix.platform.os == 'ubuntu-latest'
      run: |
        if [ -f dist/*.AppImage ]; then
          mv dist/*.AppImage dist/Flask-PyWebView-App-Linux.AppImage
          chmod +x dist/Flask-PyWebView-App-Linux.AppImage
          echo "Renamed to: Flask-PyWebView-App-Linux.AppImage"
        fi

    - name: Upload Windows artifact
      if: matrix.platform.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: Flask-PyWebView-App-Windows
        path: dist/Flask-PyWebView-App-Windows.msi
        retention-days: 30

    - name: Upload macOS artifact
      if: matrix.platform.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: Flask-PyWebView-App-macOS
        path: dist/Flask-PyWebView-App-macOS.dmg
        retention-days: 30

    - name: Upload Linux artifact
      if: matrix.platform.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: Flask-PyWebView-App-Linux
        path: dist/Flask-PyWebView-App-Linux.AppImage
        retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Display structure of downloaded files
      run: ls -la artifacts/

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/Flask-PyWebView-App-Windows/Flask-PyWebView-App-Windows.msi
          artifacts/Flask-PyWebView-App-macOS/Flask-PyWebView-App-macOS.dmg
          artifacts/Flask-PyWebView-App-Linux/Flask-PyWebView-App-Linux.AppImage
        draft: false
        prerelease: false
        generate_release_notes: true
        body: |
          ## üöÄ Flask PyWebView App Release

          Professional cross-platform desktop application built with Briefcase.

          ### üì¶ Downloads

          - **Windows**: Download the `.msi` installer
          - **macOS**: Download the `.dmg` disk image
          - **Linux**: Download the `.AppImage` (universal executable)

          ### ‚ú® Features

          - Cross-platform compatibility
          - Modern web-based interface
          - Native desktop integration with Qt
          - Professional packaging and installation

          ### üõ†Ô∏è Installation

          **Windows**: Run the `.msi` installer as administrator
          **macOS**: Open the `.dmg` and drag the app to Applications
          **Linux**: Make executable (`chmod +x`) and run directly

          Built with ‚ù§Ô∏è using Briefcase, Flask, and pywebview.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
